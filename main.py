# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'Ui/Main.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PySide6 import QtCore, QtGui, QtWidgets
from QtApp.Tables import TablesPanel
from QtApp.SettingPanel import SettingPanel
from QtApp.InitialTable import InitialTable
from QtApp.Menu import Menu
from QtApp.Status import StatusPanel
from QtApp.OrderList import OrderListPanel
from QtApp.JumpWindow import JumpWindow
from QtApp.FinalStatus import FinalStatusPanel
from QtApp.receiptPanel import Receipt
from QtApp.keyboard import KeyBoardPanel
from QtApp.OrderDetail import OrderDetail
import QtApp.Base.EditBox as EB
from QtApp.Base.EditBox import EditBox
from QtApp.Base.ConnectionLabel import ConnectionLabel
from QtApp.Base.StaffBox import Staffbox
from QtApp.Base import CWidget, CFrame, CSplitter
from DataBase import DataBase
from Logger import CreateLogger
from Config import Config
from TableInfoStore import OrderInfo, TableInfoStore
from QtApp.HistoryOrders import HistoryOrders
from QtApp.CEODPanel import CEODPanel
from QtApp.OrderAccountPanel import OrderAccountPanel
from QtApp.Base.CBLockPanel import BlockPanel
from QtApp.AccountDetail import AccountDetailPanel
from QtApp.TakeAwayPanel import TakeAwayPanel
from QtApp.InitialTakeAwayPanel import InitialTakeAwayPanel
from typing import Union


class Ui_MainWindow(QtWidgets.QMainWindow):
    def __init__(self):
        QtWidgets.QMainWindow.__init__(self)
        self.Logger = CreateLogger('Zhangji', 'TmpLog')
        self.DataBase = DataBase(self.Logger, 'DataBase.sql')
        self.TableOrder = self.DataBase.Setting.GetValue(Config.DataBase.StoreList.TABLE_ORDER)
        self.TableNumber = None
        try:
            self.setupUi()
            self.AddEvent()
        except Exception as e:
            self.DataBase.open = False
            self.DataBase.Setting.open = False
            raise e

    def setupUi(self):
        self.setObjectName("MainWindow")
        self.resize(1121, 679)
        self.centralwidget = CWidget(aParent=self)
        # self.centralwidget.setStyleSheet("border: 3px solid blue;")
        self.centralwidget.setObjectName("centralwidget")
        self.SettingPanel = SettingPanel(self.centralwidget)
        self.SettingPanel.setVisible(False)

        self.OrderDetailPanel = OrderDetail(self.centralwidget)
        self.OrderDetailPanel.setVisible(False)

        self.Receipt = Receipt(self)
        self.Receipt.setVisible(False)

        self.JumpWindow = JumpWindow(self)
        self.JumpWindow.setVisible(False)
        self.HistoryOrdersPanel = HistoryOrders(self)
        self.HistoryOrdersPanel.setVisible(False)
        self.OrderAccountPanel = OrderAccountPanel(self)
        self.OrderAccountPanel.setVisible(False)

        self.EODPanel = CEODPanel(self)
        self.EODPanel.setVisible(False)

        self.BlockPanel = BlockPanel(self)
        self.BlockPanel.setVisible(False)
        # self.BlockPanel.SetBackgoundColor('red')
        self.BlockPanel.setSizePolicy(QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Expanding)
        EB.BlockPanel = self.BlockPanel
        self.JumpWindow.BlockPanel = self.BlockPanel
        self.AccountDetail = AccountDetailPanel(self)
        self.AccountDetail.setVisible(False)
        self.AccountDetail.BlockPanel = self.BlockPanel
        self.AccountDetail.RefreshEvent = self.OrderAccountPanel.Refresh
        self.OrderAccountPanel.OpenEvent = self.AccountDetail.Load

        self.KeyBoard = KeyBoardPanel(self)
        self.KeyBoard.setVisible(False)
        EB.NumberKeyBoard = self.KeyBoard
        self.MainSplitter = CSplitter(self.centralwidget)
        self.MainSplitter.setOrientation(QtCore.Qt.Horizontal)
        self.MainSplitter.setObjectName("splitter")
        self.TablePanel = TablesPanel(self.MainSplitter)
        self.TablePanel.setupUi(self.TableOrder)
        self.TablePanel.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.TablePanel.setFrameShadow(QtWidgets.QFrame.Raised)

        # self.frame_2 = CFrame(self.MainSplitter)
        # self.frame_2.setFrameShape(QtWidgets.QFrame.StyledPanel)
        # self.frame_2.setFrameShadow(QtWidgets.QFrame.Raised)
        # self.frame_2.setObjectName("frame_2")
        self.TakeAwayPanel = TakeAwayPanel(self.MainSplitter)
        self.TakeAwayPanel.setObjectName("TakeAwayPanel")
        self.TakeAwayPanel.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.TakeAwayPanel.setFrameShadow(QtWidgets.QFrame.Raised)
        self.TakeAwayPanel.Refresh()
        self.TakeAwayPanel.OpenEvent = self.TakeAwayClick

        self.Ordersplit = CSplitter(self.centralwidget)
        self.Ordersplit.setOrientation(QtCore.Qt.Horizontal)
        self.Ordersplit.setObjectName("splitter_2")
        self.Ordersplit.setVisible(False)

        self.OrderLeftPanel = CFrame(self.Ordersplit)
        self.OrderLeftPanel.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.OrderLeftPanel.setFrameShadow(QtWidgets.QFrame.Raised)
        self.OrderLeftPanel.setObjectName("OrderLeftPanel")

        self.OrderRightPanel = CFrame(self.Ordersplit)
        self.OrderRightPanel.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.OrderRightPanel.setFrameShadow(QtWidgets.QFrame.Raised)
        self.OrderRightPanel.setObjectName("OrderRightPanel")

        self.InitialPanel = InitialTable(self.OrderRightPanel)
        self.InitialPanel.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.InitialPanel.setFrameShadow(QtWidgets.QFrame.Raised)
        self.InitialPanel.setVisible(False)

        self.InitialTakeAwayPanel = InitialTakeAwayPanel(self.OrderRightPanel)
        self.InitialTakeAwayPanel.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.InitialTakeAwayPanel.setFrameShadow(QtWidgets.QFrame.Raised)
        self.InitialTakeAwayPanel.setVisible(False)

        self.StatusPanel = StatusPanel(self.OrderRightPanel)
        self.StatusPanel.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.StatusPanel.setFrameShadow(QtWidgets.QFrame.Raised)
        self.StatusPanel.setVisible(False)

        self.MenuPanel = Menu(self.OrderRightPanel)
        self.MenuPanel.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.MenuPanel.setFrameShadow(QtWidgets.QFrame.Raised)
        self.MenuPanel.setVisible(False)

        self.OrderPanel = OrderListPanel(self.OrderLeftPanel)
        self.OrderPanel.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.OrderPanel.setFrameShadow(QtWidgets.QFrame.Raised)
        self.OrderPanel.setObjectName("OrderPanel")
        self.OrderPanel.setVisible(False)

        self.FinalStatusPanel = FinalStatusPanel(self.OrderRightPanel)
        self.FinalStatusPanel.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.FinalStatusPanel.setFrameShadow(QtWidgets.QFrame.Raised)
        self.FinalStatusPanel.setVisible(False)
        self.FinalStatusPanel.JumpWindow = self.JumpWindow

        self.setCentralWidget(self.centralwidget)
        self.toolbar = self.addToolBar("Panels")
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap(":/ToolBar/Setting.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.SettingAction = QtGui.QAction(icon, "SettingPage", self)
        self.toolbar.addAction(self.SettingAction)
        self.SettingAction.triggered.connect(self.menuSetting_onClick)

        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap(":/ToolBar/Table.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.TableAction = QtGui.QAction(icon1, "MenuPage", self)
        self.toolbar.addAction(self.TableAction)
        self.TableAction.triggered.connect(self.menuTable_onClick)

        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap(":/ToolBar/History.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.HistoryOrderAction = QtGui.QAction(icon1, "HistoryOrderPanel", self)
        self.toolbar.addAction(self.HistoryOrderAction)
        self.HistoryOrderAction.triggered.connect(self.ButHistoryOrder_onClick)

        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap(":/ToolBar/Account.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.OrderAccountAction = QtGui.QAction(icon1, "OrderAccountAction", self)
        self.toolbar.addAction(self.OrderAccountAction)
        self.OrderAccountAction.triggered.connect(self.ButOrderAccount_onClick)

        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap(":/ToolBar/Summary.jpg"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.EODAction = QtGui.QAction(icon1, "EODAction", self)
        self.toolbar.addAction(self.EODAction)
        self.EODAction.triggered.connect(self.ButEOD_onClick)

        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap(":/ToolBar/close.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.CloseOrderPanelAction = QtGui.QAction(icon1, "CloseOrderPanel", self)
        self.toolbar.addAction(self.CloseOrderPanelAction)
        self.CloseOrderPanelAction.triggered.connect(self.ButCloseOrderPanel_onClick)
        self.CloseOrderPanelAction.setVisible(False)

        label = QtWidgets.QLabel(self)
        label.setText("值班：")
        self.toolbar.addWidget(label)
        self.Staff = Staffbox(self)
        # checkableAction = QtWidgets.QWidgetAction(self)
        # checkableAction.setDefaultWidget(self.Staff)
        # self.toolbar.addAction(checkableAction)
        self.toolbar.addWidget(self.Staff)

        spacer = QtWidgets.QWidget()
        spacer.setSizePolicy(QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Expanding)
        self.toolbar.addWidget(spacer)

        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap(":/ToolBar/Refresh.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.RefreshAction = QtGui.QAction(icon1, "MenuPage", self)
        self.toolbar.addAction(self.RefreshAction)
        self.RefreshAction.triggered.connect(self.RefreshDataBase)

        self.Connection = ConnectionLabel(self)
        self.toolbar.addWidget(self.Connection)
        # self.TestAction = QtGui.QAction("Test", self)
        # self.toolbar.addAction(self.TestAction)
        # self.TestAction.triggered.connect(self.ShowTestPanel)

        self.retranslateUi()
        QtCore.QMetaObject.connectSlotsByName(self)
        self.LayoutSetting()
        self.DataBase.OpenPanel = [self.MainSplitter]

    def AddEvent(self):
        try:
            self.TablePanel.BindEvent(self.TableButClick)
            self.closeEvent = self.Close

            self.DataBase.SetUpTableColorUpdate(self.TablePanel.setupTableColor)
            self.DataBase.SetUpTakeAwayUpdate(self.TakeAwayPanel.Refresh)
            self.SettingPanel.SetupPrinters(self.DataBase.Printer)

            CurrentServiceChargePercent = (
                self.DataBase.Setting.GetValue(Config.ValueSetting.TableOrder.STR_DEFAULT_SERVICE_CHARGE_PERCENT))
            if CurrentServiceChargePercent is None:
                CurrentServiceChargePercent = 10
                self.DataBase.Setting.SetValue(Config.ValueSetting.TableOrder.STR_DEFAULT_SERVICE_CHARGE_PERCENT, 10)
            CurrentDiscountPercentA = (
                self.DataBase.Setting.GetValue(Config.ValueSetting.TableOrder.STR_DEFAULT_DISCOUNT_PERCENT_A))
            if CurrentDiscountPercentA is None:
                CurrentDiscountPercentA = 5
                self.DataBase.Setting.SetValue(Config.ValueSetting.TableOrder.STR_DEFAULT_DISCOUNT_PERCENT_A, 5)
            CurrentDiscountPercentB = (
                self.DataBase.Setting.GetValue(Config.ValueSetting.TableOrder.STR_DEFAULT_DISCOUNT_PERCENT_B))
            if CurrentDiscountPercentB is None:
                CurrentDiscountPercentB = 10
                self.DataBase.Setting.SetValue(Config.ValueSetting.TableOrder.STR_DEFAULT_DISCOUNT_PERCENT_B, 10)

            self.SettingPanel.EventChangeDefaultServiceChargePercent = self.ChangeDefaultServiceChargePercent
            self.SettingPanel.SetupServiceChargePercentList(Config.ValueSetting.TableOrder.SERVICE_CHARGE_PERCENT_LIST,
                                                            CurrentServiceChargePercent)
            self.SettingPanel.EventChangeDefaultDiscountPercentA = self.ChangeDefaultSDiscountPercentA
            self.SettingPanel.SetupDiscountPercentAList(Config.ValueSetting.TableOrder.DISCOUNT_PERCENT_LIST,
                                                        CurrentDiscountPercentA)
            self.SettingPanel.EventChangeDefaultDiscountPercentB = self.ChangeDefaultSDiscountPercentB
            self.SettingPanel.SetupDiscountPercentBList(Config.ValueSetting.TableOrder.DISCOUNT_PERCENT_LIST,
                                                        CurrentDiscountPercentB)

            self.InitialPanel.TableButClickEvent = self.TableButClick

            self.InitialTakeAwayPanel.OpenOrderEvent = self.TakeAwayClick

            self.StatusPanel.CloseTableConnect(self.CloseTableEvent)
            self.StatusPanel.NewOrderConnect(self.StartOrder)
            self.StatusPanel.CheckOutConnect(self.CheckOut)

            self.DataBase.MenuLoad.join()
            self.MenuPanel.AddMenu(self.DataBase.menu)
            self.MenuPanel.Connect(self.OrderFood)

            self.OrderPanel.AddPlaceOrderEvent(self.PlaceOrder)
            self.OrderPanel.AddSaveOrderEvent(self.SaveOrder)

            self.FinalStatusPanel.ReopenConnect(self.ReopenTable)
            self.FinalStatusPanel.DefaultServiceChargePercent = CurrentServiceChargePercent
            self.FinalStatusPanel.DefaultDiscountPercentA = CurrentDiscountPercentA
            self.FinalStatusPanel.DefaultDiscountPercentB = CurrentDiscountPercentB
            self.FinalStatusPanel.CloseEvent = self.CleanTable
            self.FinalStatusPanel.BackEvent = self.ButCloseOrderPanel_onClick

            self.OrderPanel.OrderEditEvent = self.OpenOrderEdit
            # self.OrderDetailPanel.EditOrderInDataBase = self.confirmOrderEdit
            self.OrderDetailPanel.ReloadOrderList = self.OrderPanel.Reload

            self.HistoryOrdersPanel.OpenHistoryOrderEvent = self.loadOrder

        except Exception as e:
            self.Logger.error(f'Error during Set up Event.', exc_info=e)

    def LayoutSetting(self):
        hbox = QtWidgets.QHBoxLayout(self)
        hbox.addWidget(self.MainSplitter)
        hbox.addWidget(self.Ordersplit)
        hbox.addWidget(self.SettingPanel)
        hbox.addWidget(self.Receipt)
        hbox.addWidget(self.HistoryOrdersPanel)
        hbox.addWidget(self.OrderAccountPanel)
        hbox.addWidget(self.EODPanel)
        self.centralwidget.setLayout(hbox)

        # hbox = QtWidgets.QHBoxLayout(self.frame_2)
        # hbox.addWidget(self.Ordersplit)
        # self.frame_2.setLayout(hbox)

        hbox = QtWidgets.QHBoxLayout(self.OrderRightPanel)
        hbox.addWidget(self.InitialPanel)
        hbox.addWidget(self.InitialTakeAwayPanel)
        hbox.addWidget(self.MenuPanel)
        hbox.addWidget(self.StatusPanel)
        hbox.addWidget(self.FinalStatusPanel)
        self.OrderRightPanel.setLayout(hbox)

        hbox = QtWidgets.QHBoxLayout(self.OrderLeftPanel)
        hbox.addWidget(self.OrderPanel)
        self.OrderLeftPanel.setLayout(hbox)

    def retranslateUi(self):
        _translate = QtCore.QCoreApplication.translate
        self.setWindowTitle(_translate("MainWindow", "MainWindow"))

    def RefreshDataBase(self):
        self.DataBase.HardReloadData()
        self.DataBase.RefreshMenu()
        self.MenuPanel.AddMenu(self.DataBase.menu)

    def menuSetting_onClick(self, e):
        try:
            self.SettingPanel.setVisible(True)
            self.MainSplitter.setVisible(False)
            self.Receipt.setVisible(False)
            self.HistoryOrdersPanel.setVisible(False)
            self.OrderAccountPanel.setVisible(False)
            self.EODPanel.setVisible(False)
            self.DataBase.OpenPanel = [self.SettingPanel]
        except Exception as e:
            self.Logger.error(f'Error during show Setting panel', exc_info=e)

    def menuTable_onClick(self, e):
        try:
            self.SettingPanel.setVisible(False)
            self.MainSplitter.setVisible(True)
            self.Receipt.setVisible(False)
            self.HistoryOrdersPanel.setVisible(False)
            self.OrderAccountPanel.setVisible(False)
            self.EODPanel.setVisible(False)
            self.DataBase.OpenPanel = [self.MainSplitter]
        except Exception as e:
            self.Logger.error(f'Error during show menu panel', exc_info=e)

    def ButCloseOrderPanel_onClick(self, e):
        try:
            self.DataBase.OpenPanel.pop(-1).setVisible(False)
            self.DataBase.OpenPanel[-1].setVisible(True)
            if self.DataBase.OpenPanel[-1] == self.HistoryOrdersPanel:
                self.HistoryOrdersPanel.DisplayAllOrders()
            if len(self.DataBase.OpenPanel) <= 1:
                self.TableAction.setVisible(True)
                self.SettingAction.setVisible(True)
                self.HistoryOrderAction.setVisible(True)
                self.OrderAccountAction.setVisible(True)
                self.CloseOrderPanelAction.setVisible(False)
                self.EODAction.setVisible(True)

        except Exception as e:
            self.Logger.error(f'Error during show menu panel', exc_info=e)

    def ButHistoryOrder_onClick(self, e):
        try:
            self.SettingPanel.setVisible(False)
            self.MainSplitter.setVisible(False)
            self.Receipt.setVisible(False)
            self.EODPanel.setVisible(False)
            self.OrderAccountPanel.setVisible(False)
            self.HistoryOrdersPanel.setVisible(True)
            self.HistoryOrdersPanel.DisplayAllOrders()
            self.DataBase.OpenPanel = [self.HistoryOrdersPanel]
        except Exception as e:
            self.Logger.error(f'Error during show menu panel', exc_info=e)

    def ButOrderAccount_onClick(self, e):
        try:
            self.SettingPanel.setVisible(False)
            self.MainSplitter.setVisible(False)
            self.Receipt.setVisible(False)
            self.EODPanel.setVisible(False)
            self.HistoryOrdersPanel.setVisible(False)
            self.OrderAccountPanel.setVisible(True)
            self.OrderAccountPanel.Refresh()
            self.DataBase.OpenPanel = [self.OrderAccountPanel]
        except Exception as e:
            self.Logger.error(f'Error during show menu panel', exc_info=e)

    def ButEOD_onClick(self, e):
        try:
            self.SettingPanel.setVisible(False)
            self.MainSplitter.setVisible(False)
            self.Receipt.setVisible(False)
            self.OrderAccountPanel.setVisible(False)
            self.HistoryOrdersPanel.setVisible(False)
            self.EODPanel.setVisible(True)
            self.EODPanel.Load()
            self.DataBase.OpenPanel = [self.EODPanel]
        except Exception as e:
            self.Logger.error(f'Error during show menu panel', exc_info=e)

    def TableButClick(self, TableNumber):
        try:
            self.Logger.info(f'start to load Table {TableNumber}')
            if TableNumber == 0:
                return self.TakeAwayClick(self.OrderID)
            self.TableNumber = TableNumber
            TableInfo = self.DataBase.GetOpenTableInfo2()
            if TableNumber in TableInfo.ByTableIDDict:
                TableInfo = TableInfo.ByTableIDDict[TableNumber]
                self.OrderID = TableInfo.OrderID
                self.loadOrder(TableInfo, TableNumber)
            else:
                self.loadOrder(None, TableNumber)

        except Exception as e:
            self.Logger.error(f'Error during show Table {TableNumber} info.', exc_info=e)

    def TakeAwayClick(self, OrderID):
        try:
            self.Logger.info(f'start to load Take Away {OrderID}')
            self.TableNumber = 0

            TableInfo = self.DataBase.GetTakeAwayOrders()
            if OrderID in TableInfo.ByOrderIDDict:
                TableInfo = TableInfo.ByOrderIDDict[OrderID]
                self.OrderID = TableInfo.OrderID
                self.loadOrder(TableInfo, None, True)
            else:
                self.loadOrder(None, None, True)

        except Exception as e:
            self.TableNumber = None
            self.OrderID = None
            self.Logger.error(f'Error during show Take Away {OrderID} info.', exc_info=e)

    def loadOrder(self, TableInfo: Union[TableInfoStore, None], TableNumber=None, IsTakeAway: bool = False):
        try:
            self.MenuPanel.setVisible(False)
            self.Receipt.setVisible(False)
            self.CloseOrderPanelAction.setVisible(True)
            self.EODAction.setVisible(False)
            self.TableAction.setVisible(False)
            self.SettingAction.setVisible(False)
            self.HistoryOrderAction.setVisible(False)
            self.OrderAccountAction.setVisible(False)

            self.Ordersplit.setVisible(True)
            if self.DataBase.OpenPanel[-1] != self.Ordersplit:
                self.DataBase.OpenPanel.append(self.Ordersplit)
            self.MainSplitter.setVisible(False)
            if TableInfo is None or TableInfo.StartTime is None:
                # initial table
                if IsTakeAway:
                    self.InitialTakeAwayPanel.setVisible(True)
                    self.InitialTakeAwayPanel.Clear()
                    self.InitialPanel.setVisible(False)
                else:
                    self.InitialPanel.setVisible(True)
                    self.InitialPanel.DisplayTable(TableNumber)
                    self.InitialTakeAwayPanel.setVisible(False)
                self.OrderPanel.setVisible(False)
                self.StatusPanel.setVisible(False)
                self.FinalStatusPanel.setVisible(False)
            elif TableInfo.EndTime is None:
                # working table
                self.InitialPanel.setVisible(False)
                self.InitialTakeAwayPanel.setVisible(False)
                self.StatusPanel.setVisible(True)
                self.StatusPanel.DisplayTable(TableInfo)
                self.OrderPanel.setVisible(True)
                self.OrderPanel.DisplayTable(TableInfo)
                self.OrderPanel.IsEditable = True
                self.FinalStatusPanel.setVisible(False)
            elif not TableInfo.IsFinished:
                # finishing table
                self.InitialPanel.setVisible(False)
                self.InitialTakeAwayPanel.setVisible(False)
                self.StatusPanel.setVisible(False)
                self.OrderPanel.setVisible(True)
                self.OrderPanel.DisplayTable(TableInfo)
                self.OrderPanel.IsEditable = False
                self.FinalStatusPanel.setVisible(True)
                self.FinalStatusPanel.DisplayTable(TableInfo)
                self.FinalStatusPanel.HistoryOrderSetting(True)
                self.Receipt.LoadTable(TableInfo)
            else:
                self.InitialPanel.setVisible(False)
                self.InitialTakeAwayPanel.setVisible(False)
                self.StatusPanel.setVisible(False)
                self.OrderPanel.setVisible(True)
                self.OrderPanel.DisplayTable(TableInfo)
                self.OrderPanel.IsEditable = False
                self.FinalStatusPanel.setVisible(True)
                self.FinalStatusPanel.DisplayTable(TableInfo)
                self.FinalStatusPanel.HistoryOrderSetting(False)
                self.Receipt.LoadTable(TableInfo)
        except Exception as e:
            if TableInfo is None:
                self.Logger.error(f'Error during show empty table.', exc_info=e)
            else:
                self.Logger.error(f'Error during show Order {TableInfo.OrderID} info.', exc_info=e)

    def resizeEvent(self, event):
        self.BlockPanel.resize(self.size())
        self.OrderDetailPanel.resize(self.size())
        self.JumpWindow.move(self.width() // 2 - 300, self.height() // 2 - 150)
        self.AccountDetail.move(self.width() // 2 - 300, self.height() // 2 - 150)
        QtWidgets.QMainWindow.resizeEvent(self, event)

    # def OpenTable(self):
    #     try:
    #         TableNumber = self.TableNumber
    #         self.Logger.info(f'Table {TableNumber} open')
    #         if TableNumber is not None:
    #             self.InitialPanel.setVisible(False)
    #             self.StatusPanel.setVisible(True)
    #             self.OrderID = self.DataBase.InitialOrder(TableNumber, self.InitialPanel.EditBoxNumOfPeople.value())
    #             self.TableButClick(self.TableNumber)
    #     except Exception as e:
    #         self.Logger.error(f'Error during Table {self.TableNumber} open', exc_info=e)

    def CloseTableEvent(self):
        try:
            # Need a jump out window
            self.Logger.info(f'Table {self.TableNumber} close check')
            self.JumpWindow.SetQuestion('确定要清台吗？')
            self.JumpWindow.Yesconnect(self.CloseTable)
            self.JumpWindow.OpenWindow()
        except Exception as e:
            self.Logger.error(f'Error during show Close check', exc_info=e)

    def CloseTable(self):
        try:
            self.Logger.info(f'Close Table {self.TableNumber}')
            self.DataBase.CloseTable(self.OrderID)
            self.ButCloseOrderPanel_onClick(None)
            # if self.TableNumber > 0:
            #     self.TableButClick(self.TableNumber)
            # else:
            #     self.TakeAwayClick(self.OrderID)
        except Exception as e:
            self.Logger.error(f'Error during close Table {self.TableNumber}', exc_info=e)

    def ShowTestPanel(self):
        self.Receipt.setVisible(True)
        self.Receipt.raise_()

    def AbsX(self):
        return 0

    def AbsY(self):
        return 0

    def StartOrder(self):
        try:
            self.StatusPanel.setVisible(False)
            self.MenuPanel.setVisible(True)
            self.OrderPanel.setVisible(True)
            self.OrderPanel.Clear()
        except Exception as e:
            self.Logger.error(f'Error during show menu page, start order', exc_info=e)

    def Close(self, e):
        self.Logger.info(f'close connection')
        self.DataBase.Update_()
        self.DataBase.open = False
        self.DataBase.Setting.open = False

    def OrderFood(self, FoodID):
        try:
            self.Logger.info(f'menu order food, food id:{FoodID}')
            Order = OrderInfo()
            Order.FoodID = FoodID
            Order.Qty = 1
            Order.Note = ''
            Order.LoadMenu(self.DataBase.menu)
            Order.UnitPrice = Order.OriUnitPrice
            self.OrderPanel.AddOrder(Order)
        except Exception as e:
            self.Logger.error(f'Error during order food into orderlist', exc_info=e)

    def PlaceOrder(self, Orders: TableInfoStore):
        try:
            self.Logger.info(f'Place order')
            for order in Orders.Orders:
                order.OrderID = self.OrderID
                order.StaffID = self.DataBase.StaffList[self.DataBase.StaffName]
            self.DataBase.PlaceOrder(Orders, True)
            self.TableButClick(self.TableNumber)
        except Exception as e:
            self.Logger.error(f'Error during placing order', exc_info=e)

    def SaveOrder(self, Orders: TableInfoStore):
        try:
            self.Logger.info(f'Save order')
            for order in Orders.Orders:
                order.OrderID = self.OrderID
                order.StaffID = self.DataBase.StaffList[self.DataBase.StaffName]
            self.DataBase.PlaceOrder(Orders, False)
            self.TableButClick(self.TableNumber)
        except Exception as e:
            self.Logger.error(f'Error during placing order', exc_info=e)

    def CheckOut(self):
        TableNumber = int(self.StatusPanel.TableNumber)
        OrderID = int(self.StatusPanel.OrderID)
        try:
            self.Logger.info(f'Table {TableNumber} orderID {OrderID} checkout')
            self.DataBase.CheckOutTable(OrderID)
            if TableNumber > 0:
                self.TableButClick(TableNumber)
            else:
                self.TakeAwayClick(OrderID)
        except Exception as e:
            self.Logger.error(f'Error during check out table {TableNumber}  orderID {OrderID} ', exc_info=e)

    def ReopenTable(self):
        self.DataBase.ReopenTable(self.OrderID)
        if self.TableNumber > 0:
            self.TableButClick(self.TableNumber)
        else:
            self.TakeAwayClick(self.OrderID)

    def ChangeDefaultServiceChargePercent(self, Value):
        self.DataBase.Setting.SetValue(Config.ValueSetting.TableOrder.STR_DEFAULT_SERVICE_CHARGE_PERCENT, Value)
        self.FinalStatusPanel.DefaultServiceChargePercent = Value

    def ChangeDefaultSDiscountPercentA(self, Value):
        self.DataBase.Setting.SetValue(Config.ValueSetting.TableOrder.STR_DEFAULT_DISCOUNT_PERCENT_A, Value)
        self.FinalStatusPanel.DefaultDiscountPercentA = Value

    def ChangeDefaultSDiscountPercentB(self, Value):
        self.DataBase.Setting.SetValue(Config.ValueSetting.TableOrder.STR_DEFAULT_DISCOUNT_PERCENT_B, Value)
        self.FinalStatusPanel.DefaultDiscountPercentB = Value

    def CleanTable(self):
        self.ButCloseOrderPanel_onClick(None)

    def dragEnterEvent(self, e):
        e.accept()

    def dropEvent(self, event):
        pos = event.pos()
        widget = event.source()
        for n in self.TablePanel.Tables:
            w = self.TablePanel.Tables[n]
            if w.x() + w.width() > pos.x() > w.x() and w.y() + w.height() > pos.y() - self.toolbar.height() > w.y():
                if widget.TableNumber != n:
                    self.DataBase.SwitchTable(widget.TableNumber, n)

    def OpenOrderEdit(self, OrderInfo):
        # self.Ordersplit.setVisible(False)
        self.OrderDetailPanel.setVisible(True)
        self.OrderDetailPanel.SetupOrder(OrderInfo, self.TableNumber)
        self.OrderDetailPanel.raise_()
        self.OrderDetailPanel.setFixedWidth(self.width())
        self.OrderDetailPanel.setFixedHeight(self.height())
        self.DataBase.OpenPanel.append(self.OrderDetailPanel)


import QtApp.resource_rc

if __name__ == "__main__":
    import sys

    app = QtWidgets.QApplication(sys.argv)
    ui = Ui_MainWindow()
    ui.show()
    sys.exit(app.exec())
